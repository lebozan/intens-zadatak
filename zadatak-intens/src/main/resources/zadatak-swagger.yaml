openapi: 3.0.3
info:
  title: Swagger Petstore - OpenAPI 3.0
  description: |-
    intens zadatak
  termsOfService: http://swagger.io/terms/
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
servers:
  - url: http://localhost:8080/api
tags:
  - name: job candidate
    description: Job candidate endpoints
  - name: skill
    description: Skill endpoints
paths:
  /job-candidates:
    get:
      tags:
        - job candidate
      summary: Get all job candidates
      description: Get a list of all existing job candidates
      responses:
        '200':
          description: successful fetch
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/JobCandidate'
    post:
      tags:
        - job candidate
      summary: Add a new job candidate
      description: Add a new job candidate to database
      operationId: addJobCandidate
      requestBody:
        description: Create a new job candidate
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobCandidateDTO'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobCandidate'
        '400':
          description: Invalid input

  /job-candidates/skill/{skillName}:
    get:
      tags:
        - job candidate
      summary: Finds job candidates by skill name
      description: For skill name sent returns all candidates with that skill
      operationId: findAllJobCandidatesForSkill
      parameters:
        - name: skillName
          in: path
          description: Skill name to filter by
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/JobCandidate'
  /job-candidates/name/{name}:
    get:
      tags:
        - job candidate
      summary: Finds job candidates by name
      description: Returns all candidates that have entered string in their name
      operationId: findAllJobCandidatesByName
      parameters:
        - name: name
          in: path
          description: Name to filter by
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/JobCandidate'
  /job-candidates/{id}:
    put:
      tags:
        - job candidate
      summary: Update job candidate with new skill
      description: returns updates job candidate
      operationId: updateJobCandidateWithSkill
      parameters:
        - name: id
          in: path
          description: ID of job canididate to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Skill name to add to candidate
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SkillDTO'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobCandidate'
        '400':
          description: Candidate already has the skill that you're trying to add
        '404':
          description: Invalid ID supplied
  /job-candidates/{id}/skill/{skillName}:
    delete:
      tags:
        - job candidate
      summary: Detele skill from job candidate
      operationId: removeSkillFromJobCandidate
      parameters:
        - name: id
          in: path
          description: ID of a job candidate to delete skill from
          required: true
          schema:
            type: integer
            format: int64
        - name: skillName
          in: path
          description: name of a skill to delete from candidate
          required: true
          schema:
            type: string
      responses:
        '200':
          description: delete successful
        '404':
          description: Job candidate with ID not found
  /skills:
    get:
      tags:
        - skill
      summary: Get all skills
      operationId: getAllSkills
      responses:
        '200':
          description: successful fetch
    post:
      tags:
        - skill
      summary: Add new skill to the database
      operationId: addNewSkill
      requestBody:
        description: Create new skill
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Skill'
      responses:
        '201':
          description: New skill successfully added

  /skills/{skillId}:
    delete:
      tags:
        - skill
      summary: Delete a skill by id
      operationId: deleteSkill
      parameters:
        - name: skillId
          in: path
          required: true
          description: ID of a skill to delete
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Skill successfully deleted
        '404':
          description: Skill with ID not found

components:
  schemas:
    JobCandidate:
      required:
        - name
        - email
        - contactNumber
        - dateOfBirth
        - skills
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: Marko Markovic
        email:
          type: string
          example: mm@mail.com
        contactNumber:
          type: string
          example: 066123321
        dateOfBirth:
          type: string
          example: 2001-04-15
        skills:
          type: array
          items:
            $ref: '#/components/schemas/Skill'
    JobCandidateDTO:
      required:
        - name
        - email
        - contactNumber
        - dateOfBirth
      properties:
        name:
          type: string
          example: Marko Markovic
        email:
          type: string
          example: mm@mail.com
        contactNumber:
          type: string
          example: 066123321
        dateOfBirth:
          type: string
          example: 2001-04-15
    Skill:
      properties:
        id:
          type: integer
          format: int64
          example: 100
        skillName:
          type: string
          example: "Some new programming language"
      required:
        - skillName
    SkillDTO:
      properties:
        skillName:
          type: string
          example: "Java programming"
      required:
        - skillName
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
  requestBodies:
    JobCandidatesArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/JobCandidate'